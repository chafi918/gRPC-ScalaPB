// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sg.protocol.grpc.poc.city



@SerialVersionUID(0L)
final case class Filter(
    value: String = "",
    `type`: sg.protocol.grpc.poc.city.FilterType = sg.protocol.grpc.poc.city.FilterType.ID
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Filter] with com.trueaccord.lenses.Updatable[Filter] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (value != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, value) }
      if (`type` != sg.protocol.grpc.poc.city.FilterType.ID) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, `type`.value) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = value
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = `type`
        if (__v != sg.protocol.grpc.poc.city.FilterType.ID) {
          _output__.writeEnum(2, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sg.protocol.grpc.poc.city.Filter = {
      var __value = this.value
      var __type = this.`type`
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readString()
          case 16 =>
            __type = sg.protocol.grpc.poc.city.FilterType.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      sg.protocol.grpc.poc.city.Filter(
          value = __value,
          `type` = __type
      )
    }
    def withValue(__v: String): Filter = copy(value = __v)
    def withType(__v: sg.protocol.grpc.poc.city.FilterType): Filter = copy(`type` = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(value)
        case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = sg.protocol.grpc.poc.city.Filter
}

object Filter extends com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.Filter] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.Filter] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): sg.protocol.grpc.poc.city.Filter = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    sg.protocol.grpc.poc.city.Filter(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      sg.protocol.grpc.poc.city.FilterType.fromValue(__fieldsMap.getOrElse(__fields.get(1), sg.protocol.grpc.poc.city.FilterType.ID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[sg.protocol.grpc.poc.city.Filter] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      sg.protocol.grpc.poc.city.Filter(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        sg.protocol.grpc.poc.city.FilterType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(sg.protocol.grpc.poc.city.FilterType.ID.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CityProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CityProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => sg.protocol.grpc.poc.city.FilterType
    }
  }
  lazy val defaultInstance = sg.protocol.grpc.poc.city.Filter(
  )
  implicit class FilterLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, sg.protocol.grpc.poc.city.Filter]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, sg.protocol.grpc.poc.city.Filter](_l) {
    def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, sg.protocol.grpc.poc.city.FilterType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
  final val TYPE_FIELD_NUMBER = 2
}
