// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sg.protocol.grpc.poc.city



@SerialVersionUID(0L)
final case class CityResponse(
    cities: Array[sg.protocol.grpc.poc.city.City] = Array.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CityResponse] with com.trueaccord.lenses.Updatable[CityResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      cities.foreach(cities => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(cities.serializedSize) + cities.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      cities.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sg.protocol.grpc.poc.city.CityResponse = {
      val __cities = (Array.newBuilder[sg.protocol.grpc.poc.city.City] ++= this.cities)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __cities += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, sg.protocol.grpc.poc.city.City.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      sg.protocol.grpc.poc.city.CityResponse(
          cities = __cities.result()
      )
    }
    def clearCities = copy(cities = Array.empty)
    def addCities(__vs: sg.protocol.grpc.poc.city.City*): CityResponse = addAllCities(__vs)
    def addAllCities(__vs: TraversableOnce[sg.protocol.grpc.poc.city.City]): CityResponse = copy(cities = cities ++ __vs)
    def withCities(__v: Array[sg.protocol.grpc.poc.city.City]): CityResponse = copy(cities = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => cities
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(cities.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = sg.protocol.grpc.poc.city.CityResponse
}

object CityResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.CityResponse] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.CityResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): sg.protocol.grpc.poc.city.CityResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    sg.protocol.grpc.poc.city.CityResponse(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Array[sg.protocol.grpc.poc.city.City]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[sg.protocol.grpc.poc.city.CityResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      sg.protocol.grpc.poc.city.CityResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Array[sg.protocol.grpc.poc.city.City]]).getOrElse(Array.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CityProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CityProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = sg.protocol.grpc.poc.city.City
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = sg.protocol.grpc.poc.city.CityResponse(
  )
  implicit class CityResponseLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, sg.protocol.grpc.poc.city.CityResponse]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, sg.protocol.grpc.poc.city.CityResponse](_l) {
    def cities: _root_.com.trueaccord.lenses.Lens[UpperPB, Array[sg.protocol.grpc.poc.city.City]] = field(_.cities)((c_, f_) => c_.copy(cities = f_))
  }
  final val CITIES_FIELD_NUMBER = 1
}
