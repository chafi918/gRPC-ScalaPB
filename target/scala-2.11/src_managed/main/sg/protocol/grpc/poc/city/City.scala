// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sg.protocol.grpc.poc.city



@SerialVersionUID(0L)
final case class City(
    name: String = "",
    nameAscii: String = "",
    lat: String = "",
    lon: String = "",
    country: String = "",
    id: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[City] with com.trueaccord.lenses.Updatable[City] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      if (nameAscii != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, nameAscii) }
      if (lat != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, lat) }
      if (lon != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, lon) }
      if (country != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, country) }
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, id) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = nameAscii
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = lat
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = lon
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = country
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sg.protocol.grpc.poc.city.City = {
      var __name = this.name
      var __nameAscii = this.nameAscii
      var __lat = this.lat
      var __lon = this.lon
      var __country = this.country
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __nameAscii = _input__.readString()
          case 26 =>
            __lat = _input__.readString()
          case 34 =>
            __lon = _input__.readString()
          case 42 =>
            __country = _input__.readString()
          case 50 =>
            __id = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      sg.protocol.grpc.poc.city.City(
          name = __name,
          nameAscii = __nameAscii,
          lat = __lat,
          lon = __lon,
          country = __country,
          id = __id
      )
    }
    def withName(__v: String): City = copy(name = __v)
    def withNameAscii(__v: String): City = copy(nameAscii = __v)
    def withLat(__v: String): City = copy(lat = __v)
    def withLon(__v: String): City = copy(lon = __v)
    def withCountry(__v: String): City = copy(country = __v)
    def withId(__v: String): City = copy(id = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = nameAscii
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = lat
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = lon
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = country
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = id
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(nameAscii)
        case 3 => _root_.scalapb.descriptors.PString(lat)
        case 4 => _root_.scalapb.descriptors.PString(lon)
        case 5 => _root_.scalapb.descriptors.PString(country)
        case 6 => _root_.scalapb.descriptors.PString(id)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = sg.protocol.grpc.poc.city.City
}

object City extends com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.City] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[sg.protocol.grpc.poc.city.City] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): sg.protocol.grpc.poc.city.City = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    sg.protocol.grpc.poc.city.City(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[sg.protocol.grpc.poc.city.City] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      sg.protocol.grpc.poc.city.City(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CityProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CityProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = sg.protocol.grpc.poc.city.City(
  )
  implicit class CityLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, sg.protocol.grpc.poc.city.City]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, sg.protocol.grpc.poc.city.City](_l) {
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def nameAscii: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.nameAscii)((c_, f_) => c_.copy(nameAscii = f_))
    def lat: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.lat)((c_, f_) => c_.copy(lat = f_))
    def lon: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.lon)((c_, f_) => c_.copy(lon = f_))
    def country: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.country)((c_, f_) => c_.copy(country = f_))
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val NAME_ASCII_FIELD_NUMBER = 2
  final val LAT_FIELD_NUMBER = 3
  final val LON_FIELD_NUMBER = 4
  final val COUNTRY_FIELD_NUMBER = 5
  final val ID_FIELD_NUMBER = 6
}
